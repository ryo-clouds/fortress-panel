import { Knex } from 'knex';

export async function up(knex: Knex): Promise<void> {
  // Insert default permissions
  await knex.table('permissions').insert([
    {
      id: knex.raw('(UUID())'),
      name: 'user.create',
      description: 'Create new users',
      resource: 'users',
      actions: JSON.stringify(['create']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'user.read',
      description: 'View user information',
      resource: 'users',
      actions: JSON.stringify(['read']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'user.update',
      description: 'Update user information',
      resource: 'users',
      actions: JSON.stringify(['update']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'user.delete',
      description: 'Delete users',
      resource: 'users',
      actions: JSON.stringify(['delete']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'user.suspend',
      description: 'Suspend users',
      resource: 'users',
      actions: JSON.stringify(['suspend']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'domain.create',
      description: 'Create new domains',
      resource: 'domains',
      actions: JSON.stringify(['create']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'domain.read',
      description: 'View domain information',
      resource: 'domains',
      actions: JSON.stringify(['read']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'domain.update',
      description: 'Update domain configuration',
      resource: 'domains',
      actions: JSON.stringify(['update']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'domain.delete',
      description: 'Delete domains',
      resource: 'domains',
      actions: JSON.stringify(['delete']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'domain.ssl',
      description: 'Manage SSL certificates',
      resource: 'domains',
      actions: JSON.stringify(['ssl_manage']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'database.create',
      description: 'Create new databases',
      resource: 'databases',
      actions: JSON.stringify(['create']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'database.read',
      description: 'View database information',
      resource: 'databases',
      actions: JSON.stringify(['read']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'database.update',
      description: 'Update database configuration',
      resource: 'databases',
      actions: JSON.stringify(['update']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'database.delete',
      description: 'Delete databases',
      resource: 'databases',
      actions: JSON.stringify(['delete']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'database.backup',
      description: 'Create database backups',
      resource: 'databases',
      actions: JSON.stringify(['backup']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'email.create',
      description: 'Create email domains',
      resource: 'email',
      actions: JSON.stringify(['create']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'email.read',
      description: 'View email configuration',
      resource: 'email',
      actions: JSON.stringify(['read']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'email.update',
      description: 'Update email configuration',
      resource: 'email',
      actions: JSON.stringify(['update']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'email.delete',
      description: 'Delete email domains',
      resource: 'email',
      actions: JSON.stringify(['delete']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'security.read',
      description: 'View security events and logs',
      resource: 'security',
      actions: JSON.stringify(['read']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'security.manage',
      description: 'Manage security settings',
      resource: 'security',
      actions: JSON.stringify(['manage']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'security.audit',
      description: 'View audit logs',
      resource: 'security',
      actions: JSON.stringify(['audit']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'system.read',
      description: 'View system information',
      resource: 'system',
      actions: JSON.stringify(['read']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'system.update',
      description: 'Update system configuration',
      resource: 'system',
      actions: JSON.stringify(['update']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'system.monitor',
      description: 'View system metrics',
      resource: 'system',
      actions: JSON.stringify(['monitor']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'system.backup',
      description: 'Create system backups',
      resource: 'system',
      actions: JSON.stringify(['backup']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'api.key.create',
      description: 'Create API keys',
      resource: 'api',
      actions: JSON.stringify(['key:create']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'api.key.read',
      description: 'View API keys',
      resource: 'api',
      actions: JSON.stringify(['key:read']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'api.key.update',
      description: 'Update API keys',
      resource: 'api',
      actions: JSON.stringify(['key:update']),
      conditions: JSON.stringify({}),
      active: true,
    },
    {
      id: knex.raw('(UUID())'),
      name: 'api.key.delete',
      description: 'Delete API keys',
      resource: 'api',
      actions: JSON.stringify(['key:delete']),
      conditions: JSON.stringify({}),
      active: true,
    },
  ]);

  // Insert system settings
  await knex.table('system_settings').insert([
    {
      id: knex.raw('(UUID())'),
      key: 'site_name',
      value: 'Fortress Panel',
      description: 'Name of the control panel',
      type: 'string',
      public: true,
      editable: true,
      category: 'general',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'site_description',
      value: 'High-Security Control Panel with Zero Trust Architecture',
      description: 'Description of the control panel',
      type: 'string',
      public: true,
      editable: true,
      category: 'general',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'admin_email',
      value: 'admin@fortress-panel.com',
      description: 'Administrator email address',
      type: 'string',
      public: false,
      editable: true,
      category: 'general',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'password_min_length',
      value: '12',
      description: 'Minimum password length',
      type: 'number',
      public: true,
      editable: true,
      category: 'security',
      validation_rule: '{"type": "number", "minimum": 8, "maximum": 128}',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'password_require_uppercase',
      value: 'true',
      description: 'Require uppercase letters in passwords',
      type: 'boolean',
      public: true,
      editable: true,
      category: 'security',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'password_require_lowercase',
      value: 'true',
      description: 'Require lowercase letters in passwords',
      type: 'boolean',
      public: true,
      editable: true,
      category: 'security',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'password_require_numbers',
      value: 'true',
      description: 'Require numbers in passwords',
      type: 'boolean',
      public: true,
      editable: true,
      category: 'security',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'password_require_symbols',
      value: 'true',
      description: 'Require special characters in passwords',
      type: 'boolean',
      public: true,
      editable: true,
      category: 'security',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'session_timeout_minutes',
      value: '60',
      description: 'Session timeout in minutes',
      type: 'number',
      public: true,
      editable: true,
      category: 'security',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'max_login_attempts',
      value: '5',
      description: 'Maximum login attempts before lockout',
      type: 'number',
      public: false,
      editable: true,
      category: 'security',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'lockout_duration_minutes',
      value: '15',
      description: 'Account lockout duration in minutes',
      type: 'number',
      public: false,
      editable: true,
      category: 'security',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'mfa_required',
      value: 'false',
      description: 'Require multi-factor authentication',
      type: 'boolean',
      public: false,
      editable: true,
      category: 'security',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'backup_enabled',
      value: 'true',
      description: 'Enable automatic backups',
      type: 'boolean',
      public: false,
      editable: true,
      category: 'backup',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'backup_retention_days',
      value: '30',
      description: 'Backup retention period in days',
      type: 'number',
      public: false,
      editable: true,
      category: 'backup',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'backup_encryption_enabled',
      value: 'true',
      description: 'Encrypt backup files',
      type: 'boolean',
      public: false,
      editable: true,
      category: 'backup',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'smtp_host',
      value: 'localhost',
      description: 'SMTP server host',
      type: 'string',
      public: false,
      editable: true,
      category: 'email',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'smtp_port',
      value: '587',
      description: 'SMTP server port',
      type: 'number',
      public: false,
      editable: true,
      category: 'email',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'smtp_secure',
      value: 'false',
      description: 'Use SSL/TLS for SMTP',
      type: 'boolean',
      public: false,
      editable: true,
      category: 'email',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'smtp_username',
      value: '',
      description: 'SMTP username',
      type: 'string',
      public: false,
      editable: true,
      category: 'email',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'smtp_password',
      value: '',
      description: 'SMTP password',
      type: 'string',
      public: false,
      editable: true,
      category: 'email',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'smtp_from_email',
      value: 'noreply@fortress-panel.com',
      description: 'From email address',
      type: 'string',
      public: false,
      editable: true,
      category: 'email',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'rate_limit_enabled',
      value: 'true',
      description: 'Enable rate limiting',
      type: 'boolean',
      public: false,
      editable: true,
      category: 'api',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'api_rate_limit_per_minute',
      value: '100',
      description: 'API rate limit per minute',
      type: 'number',
      public: false,
      editable: true,
      category: 'api',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'domain_default_quota_mb',
      value: '1024',
      description: 'Default domain quota in MB',
      type: 'number',
      public: false,
      editable: true,
      category: 'domains',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'domain_default_bandwidth_gb',
      value: '100',
      description: 'Default domain bandwidth limit in GB',
      type: 'number',
      public: false,
      editable: true,
      category: 'domains',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'database_default_size_mb',
      value: '512',
      description: 'Default database size in MB',
      type: 'number',
      public: false,
      editable: true,
      category: 'databases',
    },
    {
      id: knex.raw('(UUID())'),
      key: 'email_default_quota_mb',
      value: '1024',
      description: 'Default email quota in MB',
      type: 'number',
      public: false,
      editable: true,
      category: 'email',
    },
  ]);

  console.log('✅ Inserted default permissions and system settings');
}

export async function down(knex: Knex): Promise<void> {
  await knex.table('system_settings').del();
  await knex.table('permissions').del();
  console.log('✅ Removed default permissions and system settings');
}